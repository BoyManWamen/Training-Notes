What is Assembly Language?
Definition: Assembly language is a low-level programming language that is specific to a particular computer architecture. It uses symbolic instructions representing basic operations and registers.
1. Basic Concepts:
Machine Language vs. Assembly Language:

Machine Language: Binary code directly understood by the computer's central processing unit (CPU).
Assembly Language: Human-readable, mnemonic representation of machine language.
Registers:

Small, fast storage locations within the CPU.
Used for temporary data storage and manipulation.
Instructions:

Basic operations represented by mnemonics.
Examples: MOV (move data), ADD (addition), SUB (subtraction).
Memory Addresses:

Location identifiers for data stored in memory.
Used in load and store operations.
2. Registers and Data Movement:
Registers in x86 Architecture:

EAX, EBX, ECX, EDX: General-purpose registers.
ESP, EBP: Stack-related registers.
ESI, EDI: Source and destination index registers.
Data Movement:

MOV instruction: Transfers data between registers or between a register and memory.
3. Arithmetic and Logic Operations:
Arithmetic Operations:

ADD, SUB, MUL, DIV: Addition, subtraction, multiplication, division.
Logic Operations:

AND, OR, XOR, NOT: Bitwise logical operations.
CMP: Compares two values.
4. Control Flow:
Conditional Jumps:

JMP, JE, JNE, JG, JL: Jump instructions based on conditions.
Loops:

Using CMP and conditional jumps for loop control.
5. Procedures and the Stack:
Procedures:

Subroutines or functions.
Defined using PROC and ENDP directives.
Stack Operations:

PUSH, POP: Used for managing the stack.
CALL, RET: Call and return from procedures.
6. Assembly Directives:
DB, DW, DD:

Define Byte, Define Word, Define Doubleword.
Reserve space for data.
SEGMENT and ENDS:

Define program segments.
